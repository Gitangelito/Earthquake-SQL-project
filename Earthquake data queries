select * from earthquakes.earthquake_test;


-- SELECT COUNT OF ROWS 
select  count(*) from  earthquakes.earthquake_test;

-- SELECT MIN, MAX, AVG, stdev AND COUNTS VALUES
select Min(magnitude), MAX(magnitude), avg(magnitude), stddev(magnitude),  count(magnitude) AS Total_Earthquakes
from earthquakes.earthquake_test;

-- SELECT ALL COUNTRIES THAT ARE NOT IN NULL OR BLANK SPACES
SELECT country 
from earthquakes.earthquake_test where country is not null
AND country != '';

-- SELECT THE COUNTS OF ALL THE COUNTRIES
SELECT country , count(country)
from earthquakes.earthquake_test where country is not null
AND country != ''
group by country; 



-- SELECTS ALL MIN AND VALUES FROM THE PLACES
select place, Min(magnitude), MAX(magnitude)
from earthquakes.earthquake_test
group by place
order by min(magnitude);


-- SELECT THE MIN & MAX VALUE AMONG ALL PLACES
select place, magnitude
from earthquakes.earthquake_test
where magnitude = (select Min(magnitude) from  earthquakes.earthquake_test)
OR magnitude = (select max(magnitude) from  earthquakes.earthquake_test);

-- SELECT COUNTRY(IES) WHERE ALL EARTHQUAKES HAPPENED
select *
from earthquakes.earthquake_test
where country = ''; 

-- PLACES AND MAGNITUDE BY DATE FOR 2024
select place, magnitude, date
from earthquakes.earthquake_test 
where date > '2024-01-01'
order by date asc;

-- DISTRIBUTION ANALYSIS - MAGNITUDE DISTRIBUTION
-- FREQUENCY COUNT

select magnitude, count(*) as Frequency
from earthquakes.earthquake_test
group by magnitude 
order by magnitude desc;

-- PLACE AND COUNTS OF EARTHQUAKE MAGNITUDES
select title, count(magnitude), magnitude
from earthquakes.earthquake_test
group by title, magnitude
order by title desc; 

-- HIStOGRAM CHATGPT
-- Counts of earthquakes with different intensities
SELECT
	case 
	when magnitude < 2 then '0-1.9'
        when magnitude < 3 then '2-2.9'
        when magnitude < 4 then '3-3.9'
        when magnitude < 5 then '4-4.9'
        when magnitude < 6 then '5-5.9'
        when magnitude < 7 then '6-6.9'
        ELSE '7+'
	END AS magnitude_range,
    count(*) as frequency
from earthquakes.earthquake_test
group by magnitude_range
order by magnitude_range; 


-- Total Earthquakes that happened during 24hrs
SELECT
	case 
	when time between '05:00:00' AND '11:59:59' then 'Morning - 05:00 AM TO 12:00 PM'
        when time between '12:00:00' AND '16:59:59' then 'Afternoon - 12:00 PM TO 5:00 PM'
        when time between '17:00:00' AND '20:59:59' then 'Evening - 5:00 PM TO 9:00 PM'
        Else 'Night - 9:00 PM TO 5:00 AM'
       
	END AS time_range,
    count(*) as Earthquakes_count_day
from earthquakes.earthquake_test
-- where country = ''
group by time_range 
order by time_range ASC;



-- DEPTH DISTRIBUTION

select depth, count(*) as depth_inKM
from earthquakes.earthquake_test
group by depth 
order by depth; 

-- COUNT ALL DEPTHS
select depth, count(depth)
from earthquakes.earthquake_test
where depth <=70
group by depth;

-- select count(depth)
-- from earthquakes.earthquake_test
-- where depth >=300;
-- where depth >= 70 and depth <=300;
-- where depth >= 70 and 300;



-- CATEGORIZED DEPTH FREQUENCY

SELECT
	case 
		when depth <= 70 then 'Shallow'
        when depth  >= 70 and depth <= 300 then 'Intermediate'
        ELSE 'Deep'
	END AS Depth_frequency,
    count(*) as frequency
from earthquakes.earthquake_test
group by Depth_frequency
order by Depth_frequency asc; 



-- SELECT MIN, MAX, AVG, stdev AND COUNTS VALUES OF DEPTH
select Min(depth), MAX(depth), avg(depth), stddev(depth),  count(depth) AS Total_Earthquakes
from earthquakes.earthquake_test;

-- LOCATION DISTRIBUTION


SELECT country , count(country)
from earthquakes.earthquake_test 
where country is not null
AND country != ''
group by country;

-- LOCATION FREQUENCY

SELECT location , count(*) as frequency
from earthquakes.earthquake_test 
where country is not null
AND country != ''
group by location
order by location desc;



-- PERCENTAGE DISTRIBUTION

select depth,
count(*) AS frequency,
(count(*)/ (select count(*) from earthquakes.earthquake_test )) * 100 as percentage
from earthquakes.earthquake_test
group by depth
order by depth desc;


-- YEARLY FREQUENCY / EARTHQUAKE COUNT PER YEAR ----------------------------------------------------------------------------

SELECT year(date) as year,
count(*) as Total_earthquakes
from earthquakes.earthquake_test 
group by year(date)
order by year;

-- TREND ANALYSIS with guidance
-- Using LAG
Select Year(date) as Year_prox,
	count(*) as frequency,
	LAG(count(*),1,0) over (order by Year(date)) AS prev_year_count,
	count(*) - LAG(count(*),1,0) over (order by Year(date)) as frequency_change
	from earthquakes.earthquake_test
group by Year(date)
order by Year_prox;

-- MOVING AVERAGE per Year

Select Year(date) as Year_prox,
	count(*) as frequency,
    AVG (count(*)) over (order by Year(date) ROWS between 2 preceding and 2 following) as moving_avg
	from earthquakes.earthquake_test
group by Year(date)
order by Year_prox;


-- Earthquake Count per Month
Select month(date) as month_count,
	count(*) as frequency
    from earthquakes.earthquake_test
group by Month(date)
order by month_count;

-- Seasonal Fluctuation

SELECT
	case 
		when Month(date) IN (1,2,3) then 'Q1'
        when Month(date) IN (4,5,6) then 'Q2'
        when Month(date) IN (7,8,9) then 'Q3'
        else 'Q4'
	END AS Quarter,
    count(*) as frequency
from earthquakes.earthquake_test
group by Quarter
order by Quarter; 

-- MOVING AVERAGE per Month


Select Month(date) as Month_prox,
	count(*) as frequency,
    AVG (count(*)) over (order by Month(date) ROWS between 1 preceding and 1 following) as moving_avg
	from earthquakes.earthquake_test
group by Month(date)
order by Month_prox;

-- select version();
-- Checks values in table
-- DESCRIBE earthquakes.earthquake_test;



-- TIME OF DAY / EARTHQUAKE COUNT PER HOUR 

SELECT HOUR(time) as Hour_count,
	count(*) as Hour_frequency
from earthquakes.earthquake_test 
group by Hour(time)
order by Hour_count;

-- MOVING AVERAGE HOURLY

Select hour(time) as time_prox,
	count(*) as frequency,
    AVG (count(*)) over (order by  hour(time)  ROWS between 1 preceding and 1 following) as moving_avg
	from earthquakes.earthquake_test
group by hour(time)
order by time_prox;





